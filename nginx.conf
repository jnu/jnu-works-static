
#user  nobody;
#Defines which Linux system user will own and run the Nginx server

worker_processes  1;
#Referes to single threaded process. Generally set to be equal to the number of CPUs or cores.

error_log /var/log/nginx/static.error.log;

#pid        logs/nginx.pid;
#nginx will write its master process ID(PID).

events {
    worker_connections  1024;
    # worker_processes and worker_connections allows you to calculate maxclients value:
    # max_clients = worker_processes * worker_connections
}


http {
    include       mime.types;
    # anything written in /opt/nginx/conf/mime.types is interpreted as if written inside the http { } block

    default_type  application/octet-stream;

    access_log /var/log/nginx/static.access.log;

    sendfile        on;
    # If serving locally stored static files, sendfile is essential to speed up the server,
    # But if using as reverse proxy one can deactivate it

    keepalive_timeout  65;
    # timeout during which a keep-alive client connection will stay open.

    gzip  on;
    # tells the server to use on-the-fly gzip compression.


    upstream php {
        server php:80;
    }

    server {
        listen       80;
        root         /srv/static;
        server_name  localhost;

        location / {
            index  index.html index.htm;
        }

        # PHP content proxy
        location /sandbox/ss/ {
            proxy_pass http://php/;
        }

        location /ss/ {
            proxy_pass http://php/;
        }

        # redirect some legacy paths
        location ~ ^/sandbox/(.*) {
            return 301 /$1;
        }

        location ~ ^/widgets/scr/(.*) {
            return 301 /js/$1;
        }

        location ~ ^/widgets/(.*) {
            return 301 /$1;
        }

        location ~ ^/static/(.*) {
            return 301 /data/$1;
        }

        error_page  404              /404.html;

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
